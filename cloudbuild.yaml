steps:
  # Step 1: Build and push client image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/client:latest'
      - '-t'
      - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/client:$SHORT_SHA'
      - '-f'
      - './client/Dockerfile'
      - './client'
    id: 'build-client'

  # Step 2: Build and push server image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'build'
      - '-t'
      - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/server:latest'
      - '-t'
      - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/server:$SHORT_SHA'
      - '-f'
      - './server/Dockerfile'
      - './server'
    id: 'build-server'

  # Step 3: Push client image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/client:latest'
    id: 'push-client'
    waitFor: ['build-client']

  # Step 4: Push server image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      - 'push'
      - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/server:latest'
    id: 'push-server'
    waitFor: ['build-server']

  # Step 5: Run vulnerability scan on client image
  - id: 'scan-client'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running vulnerability scan for client image..."
        (gcloud artifacts docker images scan \
        "asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/client:latest" \
        --location=asia \
        --format="value(response.scan)") > /workspace/client_scan_id.txt

  # Step 6: Run vulnerability scan on server image
  - id: 'scan-server'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Running vulnerability scan for server image..."
        (gcloud artifacts docker images scan \
        "asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/server:latest" \
        --location=asia \
        --format="value(response.scan)") > /workspace/server_scan_id.txt

  # Step 7: Check severity results for client image
  - id: 'check-client-severity'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking client image vulnerabilities..."
        gcloud artifacts docker images list-vulnerabilities $(cat /workspace/client_scan_id.txt) \
        --format="value(vulnerability.effectiveSeverity)" | if grep -Fxq CRITICAL; \
        then echo "❌ Client image failed vulnerability check (CRITICAL found)" && exit 1; \
        else echo "✅ Client image passed vulnerability check (no CRITICAL issues)" && exit 0; fi
    waitFor: ['scan-client']

  # Step 8: Check severity results for server image
  - id: 'check-server-severity'
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Checking server image vulnerabilities..."
        gcloud artifacts docker images list-vulnerabilities $(cat /workspace/server_scan_id.txt) \
        --format="value(vulnerability.effectiveSeverity)" | if grep -Fxq CRITICAL; \
        then echo "❌ Server image failed vulnerability check (CRITICAL found)" && exit 1; \
        else echo "✅ Server image passed vulnerability check (no CRITICAL issues)" && exit 0; fi
    waitFor: ['scan-server']

  # Step 9: Download client secret from Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    args:
      - 'cp'
      - 'gs://chatverse-cloud-build-logs/secrets/client-secret.yaml'
      - './client-secret.yaml'
    id: 'download-client-secret'
    waitFor: ['check-client-severity']

  # Step 10: Download server secret from Cloud Storage
  - name: 'gcr.io/cloud-builders/gsutil'
    args:
      - 'cp'
      - 'gs://chatverse-cloud-build-logs/secrets/server-secret.yaml'
      - './server-secret.yaml'
    id: 'download-server-secret'
    waitFor: ['check-server-severity']

  # Step 11: Get GKE credentials
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'container'
      - 'clusters'
      - 'get-credentials'
      - 'chatverse-cluster'
      - '--region=asia-south1'
      - '--project=chatverse-475306'
    id: 'get-gke-credentials'
    waitFor: ['-']

  # Step 12: Apply secrets, deploy to GKE, rollout (same as your original steps)
  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'client-secret.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=asia-south1'
      - 'CLOUDSDK_CONTAINER_CLUSTER=chatverse-cluster'
    id: 'apply-client-secret'
    waitFor: ['get-gke-credentials', 'download-client-secret']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'server-secret.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=asia-south1'
      - 'CLOUDSDK_CONTAINER_CLUSTER=chatverse-cluster'
    id: 'apply-server-secret'
    waitFor: ['get-gke-credentials', 'download-server-secret']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/client-deployment.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=asia-south1'
      - 'CLOUDSDK_CONTAINER_CLUSTER=chatverse-cluster'
    id: 'deploy-client'
    waitFor: ['apply-client-secret']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['apply', '-f', 'k8s/server-deployment.yaml']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=asia-south1'
      - 'CLOUDSDK_CONTAINER_CLUSTER=chatverse-cluster'
    id: 'deploy-server'
    waitFor: ['apply-server-secret']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['rollout', 'status', 'deployment/chatverse-client', '--timeout=5m']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=asia-south1'
      - 'CLOUDSDK_CONTAINER_CLUSTER=chatverse-cluster'
    id: 'rollout-client'
    waitFor: ['deploy-client']

  - name: 'gcr.io/cloud-builders/kubectl'
    args: ['rollout', 'status', 'deployment/chatverse-server', '--timeout=5m']
    env:
      - 'CLOUDSDK_COMPUTE_REGION=asia-south1'
      - 'CLOUDSDK_CONTAINER_CLUSTER=chatverse-cluster'
    id: 'rollout-server'
    waitFor: ['deploy-server']

# Images to be pushed to Artifact Registry
images:
  - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/client:latest'
  - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/client:$SHORT_SHA'
  - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/server:latest'
  - 'asia-south1-docker.pkg.dev/chatverse-475306/chatverse-docker-repo/server:$SHORT_SHA'

timeout: '1800s'

options:
  machineType: 'N1_HIGHCPU_8'
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _CLUSTER_NAME: 'chatverse-cluster'
  _CLUSTER_REGION: 'asia-south1'
  _K8S_DEPLOYMENT_PATH: 'k8s'
